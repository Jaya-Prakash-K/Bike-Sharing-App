{"cells":[{"cell_type":"markdown","source":["# Bike Sharing APP\n"],"metadata":{"id":"crW5DwbvuWBW"}},{"cell_type":"code","source":[],"metadata":{"id":"rn5lIWjeuYzR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Bike Sharing App"],"metadata":{"id":"zp-mJgqZ0MfE"}},{"cell_type":"code","source":["class Driver:\n","\n","  def __init__(self, name, vehicle, rating=5.0):\n","    self.name = name\n","    self.vehicle = vehicle\n","    self.__rating = rating #private variable\n","    self.trips = 0\n","    self.is_available = True\n","#encapsulation\n","  def get_rating(self):\n","    return self.__rating\n","\n","  def set_rating(self, rating):\n","    if rating < 0 or rating > 5:\n","      print('Invalid rating')\n","      return\n","    self.__rating = rating\n","#polymorphism\n","  def __repr__ (self): # how driver is printed\n","    return f\"Driver: {self.name} is driving a {self.vehicle}, rating: {self.__rating}, Available: {self.is_available} \"\n","\n","  def toggle_availability(self):\n","    self.is_available = not self.is_available"],"metadata":{"id":"Jof6ugYoxLfz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["driver1 = Driver('Charan', 'Bike', 4)\n","driver2 = Driver('Bob', 'Swift', 4)"],"metadata":{"id":"21Fg4ZH10UFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["driver1"],"metadata":{"id":"QQm_NNVH0UII"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Rider:\n","\n","  def __init__(self, name, location, mobile):\n","    self.name = name\n","    self.location = location\n","    self.mobile = mobile\n","    self.trips = 0\n","\n","  def __repr__(self):\n","    return f\"Rider: {self.name} is at {self.location}, Mobile: {self.mobile}\"\n","\n","  def request_ride(self, destination):\n","    self.destination = destination\n","    print(f\"{self.name} Requesting ride from {self.location} to {self.destination}\")\n","\n"],"metadata":{"id":"MlgTTZcD0ULf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","rider = Rider('Alice', 'Delhi', '1234567890')\n","\n","rider.request_ride('Mumbai')"],"metadata":{"id":"9FrZW1BX7Y4m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Ride Sharing APP"],"metadata":{"id":"sUrvtOQa0UOp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","class RideSharingApp:\n","\n","  def __init__(self): #database now\n","    self.drivers = [] #store all drivers\n","    self.riders = [] #store all riders\n","    self.trips = [] #store all trips\n","\n","  def add_driver(self, driver): #driver is the object of class driver\n","    self.drivers.append(driver)\n","    print(f\"{driver.name} added as a driver\")\n","\n","  def add_rider(self, rider):\n","    self.riders.append(rider)\n","    print(f\"{rider.name} added as a rider\")\n","#abstraction\n","  def find_available_driver(self):\n","    for d in self.drivers:\n","      if d.is_available:\n","        return d\n","    return None\n","  #booking a ride to user for destination\n","  def book_ride(self, rider, destination):\n","    '''\n","    rider = object of RIder\n","    destination = string\n","    '''\n","    if rider is None:\n","      return\n","\n","  #user resting driver\n","    rider.request_ride(destination)\n","\n","  #finding avaialable driver\n","    driver = self.find_available_driver()\n","    if driver:\n","      #successfully assigned\n","      driver.toggle_availability() # make the driver busy\n","      print(f\"Ride booked {driver.name} will drive {rider.name} from {rider.location} to {destination}\")\n","    else:\n","      print(\"No drivers avaialble at the moment.\")\n","      print(\"Please try again later\")\n","\n","  def complete_ride(self, driver):\n","    if driver and driver.is_available:\n","      driver.toggle_availability()\n","      print(f\"Ride completed! {driver.name} is available\")\n","    else:\n","      print(\"Driver not found or driver already available\")\n"],"metadata":{"id":"ecUVwDjK0UR7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["app = RideSharingApp()\n","\n","print('Im adding drivers')\n","driver1 = Driver('Charan', 'Bike', 4)\n","driver2 = Driver('Bob', 'Swift', 4)\n","app.add_driver(driver1)\n","app.add_driver(driver2)\n","\n","print('Im adding riders')\n","rider1 = Rider('Alice', 'Delhi', '1234567890')\n","rider2 = Rider('Bob', 'Mumbai', '9876543210')\n","rider3 = Rider('Charlie', 'Bangalore', '5555555555')\n","app.add_rider(rider1)\n","app.add_rider(rider2)\n","app.add_rider(rider3)\n","\n","print('now Im booking the ride: ')\n","app.book_ride(rider1, 'Mumbai')\n"],"metadata":{"id":"MEiMd35s0UVI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["app.book_ride(rider3, 'Bank')"],"metadata":{"id":"fj57QR-40UYQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["app.drivers"],"metadata":{"id":"HmzoQ95YCbDG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["app.complete_ride(driver1)"],"metadata":{"id":"gkH8b3HmxLip"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["app.drivers"],"metadata":{"id":"5BcICbspxLlx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# pick a different problem and solve it in similar way\n","# make a zomato simulation\n","# customers, restaurants, orders, delivery partners (food ordering)"],"metadata":{"id":"i2cGWMaBFIZ3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Counter:\n","    def __init__(self):\n","        self.count = 0\n","\n","    def __call__(self):\n","        self.count += 1\n","        return self.count\n","\n","c = Counter()\n","print(c())\n","print(c())"],"metadata":{"id":"_Ncw8bhLFlhg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class MyList(list):\n","    def __len__(self):\n","        return 100\n","\n","ml = MyList([1, 2, 3])\n","print(len(ml))"],"metadata":{"id":"FgwMBrPkFlku"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Base:\n","    def __init__(self, value):\n","        self.value = value\n","\n","    def __add__(self, other):\n","        return self.value + other.value\n","\n","class Derived(Base):\n","    def __add__(self, other):\n","        return self.value * other.value\n","\n","a = Base(5)\n","b = Derived(10)\n","print(a + b)"],"metadata":{"id":"8N3ULEH5FloJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class A:\n","    def __init__(self):\n","        self.multiply(15)\n","        print(self.i)\n","\n","    def multiply(self, i):\n","        self.i = 4 * i\n","\n","class B(A):\n","    def __init__(self):\n","        super().__init__()\n","\n","    def multiply(self, i):\n","        self.i = 2 * i;\n","\n","obj = B()"],"metadata":{"id":"2iy1PcK6FlrC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FlprtqDDFluS"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"toc_visible":true,"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1753097044795}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}